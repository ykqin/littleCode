#ifndef DBSCAN_H
#define DBSCAN_H

#include <vector>
#include <cmath>

struct Point {
    double x;
    double y;
    int cluster_id;
};

class DBSCAN {
public:
    DBSCAN(double eps, int min_pts);
    void fit(std::vector<Point>& points);
    
private:
    double eps_;
    int min_pts_;
    int current_cluster_id_;

    double euclidean_distance(const Point& a, const Point& b);
    void expand_cluster(Point& point, std::vector<Point>& points);
    std::vector<Point*> region_query(const Point& point, std::vector<Point>& points);
};

#endif

#include "dbscan.h"
#include <vector>
#include <cmath>

DBSCAN::DBSCAN(double eps, int min_pts) : eps_(eps), min_pts_(min_pts), current_cluster_id_(0) {}

double DBSCAN::euclidean_distance(const Point& a, const Point& b) {
    return std::sqrt(std::pow(a.x - b.x, 2) + std::pow(a.y - b.y, 2));
}

std::vector<Point*> DBSCAN::region_query(const Point& point, std::vector<Point>& points) {
    std::vector<Point*> neighbors;
    for (auto& candidate : points) {
        if (euclidean_distance(point, candidate) <= eps_) {
            neighbors.push_back(&candidate);
        }
    }
    return neighbors;
}

void DBSCAN::expand_cluster(Point& point, std::vector<Point>& points) {
    auto neighbors = region_query(point, points);
    if (neighbors.size() < min_pts_) {
        point.cluster_id = -1;  // Noise
        return;
    }
    
    point.cluster_id = current_cluster_id_;
    for (auto* neighbor : neighbors) {
        if (neighbor->cluster_id == 0) {  // Unvisited
            neighbor->cluster_id = current_cluster_id_;
            expand_cluster(*neighbor, points);
        }
    }
}

void DBSCAN::fit(std::vector<Point>& points) {
    for (auto& point : points) {
        if (point.cluster_id == 0) {  // Unvisited
            current_cluster_id_++;
            expand_cluster(point, points);
        }
    }
}


#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "dbscan.h"

namespace py = pybind11;

PYBIND11_MODULE(pydbscan, m) {
    py::class_<Point>(m, "Point")
        .def(py::init<>())
        .def_readwrite("x", &Point::x)
        .def_readwrite("y", &Point::y)
        .def_readwrite("cluster_id", &Point::cluster_id);

    py::class_<DBSCAN>(m, "DBSCAN")
        .def(py::init<double, int>())
        .def("fit", &DBSCAN::fit);
}


cmake_minimum_required(VERSION 3.4)
project(pydbscan)

add_subdirectory(pybind11)
pybind11_add_module(pydbscan pybind11_dbscan.cpp dbscan.cpp)



mkdir build
cd build
cmake ..
make


import pydbscan

# 创建点数据
points = [
    pydbscan.Point(x=1.0, y=2.0, cluster_id=0),
    pydbscan.Point(x=1.1, y=2.1, cluster_id=0),
    pydbscan.Point(x=8.0, y=8.0, cluster_id=0),
]

# 初始化 DBSCAN 参数
dbscan = pydbscan.DBSCAN(eps=1.5, min_pts=2)
dbscan.fit(points)

# 输出结果
for point in points:
    print(f"Point({point.x}, {point.y}) -> Cluster {point.cluster_id}")
